pipeline {
    agent any
    
    environment {
        PYTHON_VERSION = '3.10'
        VIRTUAL_ENV = 'venv'
        DJANGO_SETTINGS_MODULE = 'messaging_app.settings'
        DB_HOST = 'localhost'
        DB_NAME = 'messaging_app_db'
        DB_USER = 'test_user'
        DB_PASSWORD = 'test_password'
        DJANGO_SECRET_KEY = 'django-insecure-test-key-for-jenkins-ci-cd-pipeline-12345'
        DEBUG = 'True'
        GITHUB_CREDENTIALS = credentials('github-credentials')
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code from GitHub...'
                git branch: 'main',
                    credentialsId: 'github-credentials',
                    url: 'https://github.com/abdessamad-haddouche/alx-backend-python.git'
                
                sh 'pwd'
                sh 'ls -la'
                sh 'ls -la messaging_app/ || echo "messaging_app directory not found"'
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                echo 'Setting up Python virtual environment...'
                
                sh '''
                    python3 --version
                    python3 -m pip install --user virtualenv
                    python3 -m virtualenv ${VIRTUAL_ENV}
                    
                    . ${VIRTUAL_ENV}/bin/activate
                    python --version
                    pip3 install --upgrade pip
                    
                    cd messaging_app
                    
                    if [ -f messaging_app/requirements.txt ]; then
                        echo "Installing dependencies from messaging_app/requirements.txt..."
                        pip3 install -r messaging_app/requirements.txt
                    elif [ -f requirements.txt ]; then
                        echo "Installing dependencies from requirements.txt..."
                        pip3 install -r requirements.txt
                    else
                        echo "requirements.txt not found, installing basic dependencies..."
                        pip3 install Django==5.2.1 djangorestframework==3.15.1 pytest pytest-django pytest-html
                    fi
                    
                    pip3 install pytest pytest-django pytest-html pytest-cov coverage
                '''
            }
        }
        
        stage('Database Setup') {
            steps {
                echo 'Setting up test database...'
                
                sh '''
                    . ${VIRTUAL_ENV}/bin/activate
                    cd messaging_app
                    
                    python manage.py makemigrations --settings=messaging_app.test_settings || echo "Migrations already exist"
                    python manage.py migrate --settings=messaging_app.test_settings
                '''
            }
        }
        
        stage('Run Tests') {
            steps {
                echo 'Running tests with pytest...'
                
                sh '''
                    . ${VIRTUAL_ENV}/bin/activate
                    cd messaging_app
                    
                    python -m pytest \
                        --html=test-reports/pytest-report.html \
                        --self-contained-html \
                        --cov=. \
                        --cov-report=html:test-reports/coverage \
                        --cov-report=xml:test-reports/coverage.xml \
                        --junitxml=test-reports/junit.xml \
                        -v \
                        chats/tests.py chats/test_auth.py || echo "Some tests may have failed"
                '''
            }
        }
        
        stage('Generate Reports') {
            steps {
                echo 'Generating test reports...'
                
                sh '''
                    cd messaging_app
                    mkdir -p test-reports
                    echo "Build completed successfully at $(date)" > test-reports/build-summary.txt
                    echo "Tests executed with pytest" >> test-reports/build-summary.txt
                '''
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completed. Publishing reports...'
            archiveArtifacts artifacts: 'messaging_app/test-reports/**/*', allowEmptyArchive: true
            cleanWs()
        }
        
        success {
            echo 'Pipeline completed successfully!'
        }
        
        failure {
            echo 'Pipeline failed!'
        }
    }
}